{"version":3,"sources":["logo.svg","components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoInput","this","props","item","id","handleSubmit","handleChange","editStatus","className","onSubmit","type","value","onChange","disabled","Component","TodoItem","todoItem","handleDelete","handleEdit","checkStatus","onClick","aria-hidden","TodoList","list","clearList","align","map","key","App","state","uuid","e","preventDefault","newItem","updateItem","setState","target","filterItem","filter","selectItem","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63e51189.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React ,{Component} from 'react';\r\n\r\nexport default class TodoInput extends Component{\r\n    render(){\r\n        const {id,item,handleSubmit,handleChange,editStatus} = this.props;\r\n        return(\r\n            <div className=\"bg-light card card-body my-4 \">\r\n                <form onSubmit={handleSubmit}>\r\n                    <label><h5>{editStatus?\"\":\"ป้อนรายการ\"}</h5></label>\r\n                    <div  className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className={editStatus?\"input-group-text bg-success text-white\":\"input-group-text bg-primary text-white\"}>                   \r\n                                    <i className={editStatus?\"fa fa-pencil-square-o\":\"fa fa-book\"} ></i>    \r\n                            </div>\r\n                        </div>\r\n                        <input className={editStatus?\"form-control is-invalid\":\"form-control\"}  type=\"text\" value={item} onChange={handleChange}/>  \r\n                        <div className=\"mx-5 invalid-feedback\">\r\n                            <h6>แก้ไขรายการของคุณ !</h6>\r\n                        </div> \r\n                    </div>\r\n                    <input type=\"submit\" disabled={item?false:true}\r\n                        className={editStatus?\"my-3 btn btn-block btn-success font-weight-bold\":\"my-3 btn btn-block btn-primary font-weight-bold\"}\r\n                        value={editStatus?\"บันทึกรายการ\":\"เพิ่มรายการ\"}\r\n                    />\r\n                </form>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React ,{Component} from 'react';\r\nimport \"./TodoItem.css\";\r\n\r\nexport default class TodoItem extends Component{\r\n    render(){\r\n        const {todoItem,handleDelete,handleEdit,checkStatus} = this.props;\r\n        return(\r\n           <li className=\"list-group-item d-flex justify-content-between my-2\">\r\n                <div >\r\n                    <input className=\"mx-2 checkbox-1x\" type=\"checkbox\" id=\"customCheck1\"></input>\r\n                    {todoItem}\r\n                </div>\r\n                <div>\r\n                <span  className=\"mx-2 text-primary\" onClick={handleEdit}>\r\n                    <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n                </span>\r\n                <span className=\"text-danger\" onClick={handleDelete} >\r\n                    <i className=\"fa fa-trash\"  aria-hidden=\"true\"></i>\r\n                </span>\r\n            </div>\r\n           </li>\r\n            \r\n        );\r\n    }\r\n}","import React ,{Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nexport default class TodoList extends Component{\r\n    render(){\r\n        const {list,clearList,handleDelete,handleEdit,editStatus} = this.props;\r\n        return(\r\n            <ul className=\"bg-light card card-body my-5\">\r\n                <h4 align=\"center\" className=\"my-3\" >รายการ</h4>\r\n                {list.map(item=>{\r\n                    return(\r\n                        <TodoItem\r\n                            key={item.id} \r\n                            todoItem={item.todoItem}\r\n                            handleDelete={()=>handleDelete(item.id)}\r\n                            handleEdit={()=>handleEdit(item.id)}\r\n                        />\r\n                    )\r\n                })}\r\n                <button onClick={clearList} className=\"btn btn-danger font-weight-bold\" disabled={editStatus?true:false} >ลบทั้งหมด</button>\r\n            </ul>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\nimport uuid from \"uuid\";\n\nclass App extends Component {\n  state={\n    list:[],\n    id:uuid(),\n    item:\"\",\n    editStatus:false,\n    checkStatus:false\n  };\n/////////////////////////////////////////////////////////เมื่อกดปุ่มSubmit\n  handleSubmit=(e)=>{\n    e.preventDefault();\n    const newItem={\n      id:this.state.id,\n      todoItem:this.state.item\n    }; //ดึงค่าจาก state item มาเก็บที่ newItem\n    const updateItem=[... this.state.list,newItem]; //นำItemใหม่ เพิ่มลงในList\n    this.setState({\n      list:updateItem,\n      id:uuid(),\n      item:\"\",\n      editStatus:false\n    })\n  }\n\n  handleChange=(e)=>{\n    this.setState({\n      item:e.target.value\n    })\n  }\n  clearList=()=>{\n    this.setState({\n      list:[]\n    })\n  }\n\n  handleDelete=(id)=>{\n    const filterItem=this.state.list.filter(item=>item.id !== id)\n    this.setState({\n      list:filterItem\n    })\n  }\n\n  handleEdit=(id)=>{\n    const selectItem=this.state.list.find(item=>item.id === id)\n    const filterItem=this.state.list.filter(item=>item.id !== id)\n\n    this.setState({\n      list:filterItem,\n      item:selectItem.todoItem,\n      id:id,\n      editStatus:true\n    })\n  }\n\n  render(){\n    return(\n      <div className=\"container \">\n        <h1 className=\"my-5 \" align=\"center\">To do list - Web Application</h1>\n        <div>\n          <TodoInput\n            id={this.state.id} \n            item={this.state.item}\n            handleSubmit={this.handleSubmit}\n            handleChange={this.handleChange}\n            editStatus={this.state.editStatus}\n          />\n          <TodoList\n            list={this.state.list}\n            clearList={this.clearList}\n            handleDelete={this.handleDelete}\n            handleEdit={this.handleEdit}\n            editStatus={this.state.editStatus}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}